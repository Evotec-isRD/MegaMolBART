name: MegaMolBART
do_training: True # set to false if data preprocessing steps must be completed
do_testing: False # set to true to run evaluation on test data after training, requires test_dataset section
seed: 42
restore_from_path: null # used when starting from a .nemo file

trainer:
  devices: 1
  num_nodes: 1
  accelerator: gpu
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False # checkpointing done by exp_manager
  replace_sampler_ddp: False
  max_epochs: null
  max_steps: 2000000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 200
  val_check_interval: 2000
  num_sanity_val_steps: 2 # set to 0 or small number to test validation before completing a full epoch
  limit_val_batches: 0.25
  limit_test_batches: 0
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  name: ${name}
  exp_dir: /result/nemo_experiments/${.name}/${.wandb_logger_kwargs.name}
  explicit_log_dir: ${.exp_dir}
  create_wandb_logger: True
  create_tensorboard_logger: True
  wandb_logger_kwargs:
    project: ${model.name}_pretraining
    name: ${model.name}_pretraining
    group: ${model.name}
    job_type: Localhost_nodes_${trainer.num_nodes}_gpus_${trainer.devices}
    entity: clara-discovery
    notes: "date: ${now:%y%m%d-%H%M%S}"
    tags:
      - ${name}
      - ${model.name}
    offline: False
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_molecular_accuracy # TODO switch to molecular_accuracy when correctly calculated
    mode: max
    save_top_k: 3
    filename: '${name}-${model.name}--{val_molecular_accuracy:.2f}-{val_reduced_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}
    save_last: True
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel

model:
  name: default
  # model parallelism 
  micro_batch_size: 32
  global_batch_size: 32
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1 # pipeline parallel is not supported yet. Use 1 for now.
  resume_from_checkpoint: null # manually set the checkpoint file to load from

  encoder_arch: 'transformer'
  decoder_arch: 'transformer'
  activation: 'gelu'
  init_method_std: 0.02 # standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # dropout probability for hidden state transformer.
  attention_dropout: 0.1 # dropout probability in the attention layer.
  kv_channels: null # projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  pre_process: True # add embedding
  post_process: True # add pooler  

  # model architecture
  seq_length: 512
  max_position_embeddings: ${.seq_length}
  ffn_hidden_size: ${multiply:4, ${.hidden_size}} # Transformer FFN hidden size. Usually 4 * hidden_size.

  # memory efficiency
  persist_layer_norm: True # use persistent fused layer norm kernel.
  gradient_as_bucket_view: True # allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  make_vocab_size_divisible_by: 128 # pad the vocab size to be divisible by this value for computation efficiency. Default: 128
  masked_softmax_fusion: True # batch padding size must be divisible by 8 if True, otherwise will result in CUDA alignment crash

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.
  fp32_residual_connection: False # move residual connections to fp32
  fp16_lm_cross_entropy: False # move the cross entropy unreduced loss calculation for lm head to fp16

  # miscellaneous
  seed: ${seed}
  use_cpu_initialization: False # init weights on the CPU (slow for large models)
  onnx_safe: False # use work-arounds for known problems with Torch ONNX exporter

  # not implemented in NeMo yet
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: 1


  tokenizer:
    mask_scheme: span
    mask_prob: 0.1

  data:  
    dataset_path: /data/zinc_csv_split
    dataset_files: x[000..146].csv
    encoder_augment: True # consistent with DEFAULT_AUGMENT in AZ script
    encoder_mask: True # task = mask(span)_aug
    decoder_augment: True # task = mask(span)_aug
    decoder_mask: False
    micro_batch_size: ${model.micro_batch_size}
    num_workers: 10

  optim:
    name: fused_adam
    lr: 1.0 # max is scaled by Noam scheduler to d_model**(-0.5) * warmup**(-0.5)
    betas:
      - 0.9
      - 0.999
    eps: 1e-8
    weight_decay: 0.01
    sched:
      name: NoamAnnealing
      d_model: ${model.hidden_size}
      warmup_steps: null
      warmup_ratio: 0.008
      max_steps: 100000
      min_lr: 1e-5
