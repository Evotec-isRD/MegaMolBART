name: &name MegaMolBART
do_training: true # set to false if data preprocessing steps must be completed
do_testing: false # set to true to run evaluation on test data after training, requires test_dataset section
seed: 42
restore_from_path: null # used when starting from a .nemo file

trainer:
  devices: 1
  num_nodes: 1
  accelerator: gpu
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: null
  max_steps: 500 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 50
  limit_val_batches: 2
  limit_test_batches: 2
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  name: *name
  exp_dir: /result/nemo_experiments/${.name}/${.wandb_logger_kwargs.name}
  explicit_log_dir: ${.exp_dir}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: ${model.name}_pretraining
    name: ${model.name}_pretraining
    group: ${model.name}
    job_type: Localhost_nodes_${trainer.num_nodes}_gpus_${trainer.devices}
    entity: clara-discovery
    notes: "date: ${now:%y%m%d-%H%M%S}"
    tags:
      - *name
      - ${model.name}
    offline: True # TODO FIXME
  resume_if_exists: False # TODO FIXME
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 3
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    filename: '${name}-${model.name}--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

model:
  name: tiny_span_aug
  # model parallelism 
  micro_batch_size: 4
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1 # T5 PP is not supported yet. Use 1 for now.

  # model architecture
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler

  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.

  seq_length: 512
  max_position_embeddings: ${.seq_length}
  num_layers: 2
  hidden_size: 768
  ffn_hidden_size: ${multiply:4, ${.hidden_size}} # Transformer FFN hidden size. Usually 4 * hidden_size.
  num_attention_heads: 12
  init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
  attention_dropout: 0.1 # Dropout probability in the attention layer.
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  encoder_arch: 'transformer'
  decoder_arch: 'transformer'
  activation: 'gelu'

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # miscellaneous
  seed: 1234
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.

  # not implemented in NeMo yet
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: 1 

  tokenizer:
    mask_scheme: span
    mask_prob: 0.0 # TODO FIX ME

  data:  
    dataset_path: /data/zinc_csv_split
    dataset_files: x000.csv
    encoder_augment: False # TODO FIX ME
    encoder_mask: False # task = mask(span)_aug # TODO FIX ME
    decoder_augment: False # TODO FIX ME
    micro_batch_size: ${model.micro_batch_size}
    num_workers: 0

  optim:
    name: fused_adam
    lr: 0.0001
    betas:
      - 0.9
      - 0.999
    eps: 1e-8
    weight_decay: 0.01
    sched:
      name: InverseSquareRootAnnealing # TODO switch to noam ?
      min_lr: 0.0
      last_epoch: -1
      warmup_ratio: 0.03 
      # name: WarmupAnnealing
      # min_lr: 0.00001
      # last_epoch: -1
      # warmup_ratio: 0.01
